The system should allow users to define a "pay day" — a recurring monthly date — that acts as a reference point for aligning expected demand spikes. This is not limited to salary-based purchases, but also applies to calendar-based events (e.g., holidays or predictable monthly shopping cycles) which may fall in different weeks in different years. The system should use this pay day to apply shifting logic, ensuring demand spikes are matched correctly with the right calendar weeks during training and forecasting.



The system shall include a boolean parameter named enable_payday_impact under the system_params table.

If enable_payday_impact is set to false, all pay day logic is ignored.

If enable_payday_impact is set to true, the system reads the value of another parameter payday_date, which is a day between 1 and 31 representing the recurring reference day each month.

The system assumes this pay day will occur once every month (total 12 times a year) and will use it to track demand surges following this date.

The system should apply a demand impact logic that increases expected demand for the next 14 days (2 weeks) after each pay day.

The system must implement week-shifting logic so that even if the pay day falls in different weeks across years, the forecast model still learns and applies the spike to the correct calendar week.



✅ User can enable or disable the pay day impact using enable_payday_impact.

✅ When enabled, user can configure the payday_date (1–31), which applies monthly.

✅ The system assumes 12 such events per year — one per month — based on the configured date.

✅ A 2-week demand hike window should be applied after each occurrence of the pay day.

✅ The system can handle and correctly shift these windows when pay day or similar events fall in different weeks across different years.

✅ Forecast models must take this window into account during both historical training and future prediction phases.

✅ If the feature is disabled, neither payday_date nor any of its effects are used in the forecast pipeline.




Some demand patterns happen around specific dates every month — like salary spending or monthly shopping habits — and these patterns often repeat. However, because the calendar shifts every year, these dates may land in different weeks. This can confuse the forecasting model if not handled properly.

By letting users define a monthly "pay day," the system gains a reliable reference to anchor and shift these recurring patterns, keeping the learning and predictions accurate — even when the calendar week changes. It helps the model understand when and why spikes happen, and adjust accordingly.

